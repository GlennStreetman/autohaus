datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model servicerequests {
    id Int @id @default(autoincrement())
    firstname String 
    lastname String
    email String 
    phone String 
    prefdate String 
    preftime String 
    altdate String 
    alttime String 
    make String 
    model String 
    modelyear String 
    reason String 
    requestdate DateTime @db.Date @default(now()) 
    archive Boolean @default(false)
}

model holidays {
     id Int @id @default(autoincrement())
     targetdate String
     holiday String 
     daysclosed String
}

model resumes {
    id Int @id @default(autoincrement())
    firstname String 
    lastname String 
    email String 
    phone String
    address1 String
    address2 String 
    city String 
    state1 String 
    zip String 
    coverletter String
    submitdate DateTime @db.Date @default(now())  
    archive Boolean @default(false)
    filename String @default("pass")
}

model team {
    id Int @id @default(autoincrement())
    name String @unique
    title String
    descrition String
    filename String @default("pass")
    orderNumber Int @default(99)
}